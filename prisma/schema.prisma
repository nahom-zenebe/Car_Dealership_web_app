generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Car {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  make         String
  model        String
  year         Int
  price        Float
  mileage      Int?
  color        String?
  inStock      Boolean       @default(true)
  imageUrls    String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  transmission Transmission?
  description  String?
  saleItems    SaleItem[]
  features     String[]
  fuelType     FuelType?
}

model Sale {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  buyer           User        @relation(fields: [buyerId], references: [id])
  buyerId         String      @db.ObjectId
  saleDate        DateTime    @default(now())
  price           Float
  paymentType     PaymentType
  status          SaleStatus  @default(completed)
  deliveryAddress String
  deliveryDate    DateTime?
  items           SaleItem[]  
  paymentStatus   PaymentStatus @default(pending)
  paymentIntentId String? // For Stripe/other processors
  failureReason   String?
  emailSent       Boolean     @default(false)
}

model SaleItem {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  sale     Sale     @relation(fields: [saleId], references: [id])
  saleId   String   @db.ObjectId
  car      Car?      @relation(fields: [carId], references: [id])
  carId    String?   @db.ObjectId
  price    Float    
}


model User {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String   @unique
  passwordHash          String
  role                  UserRole
  phone                 String?
  address               String?
  profilePhotoUrl       String?
  isVerified            Boolean  @default(false)
  verificationStatus    VerificationStatus @default(pending)
  verificationComments  String?
  verifiedAt            DateTime?
  verifiedByAdminId     String?  @db.ObjectId
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  purchases             Sale[]
  savedPaymentMethods   PaymentMethod[]
  theme                String     @default("system")
  darkMode             Boolean    @default(false)
  verificationRequest VerificationRequest? 
  privacy              PrivacySettings?
  
}

model PaymentMethod {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.ObjectId
  type           PaymentType
  cardNumber     String?  // Last 4 digits for security
  cardExpiry     String?
  cardName       String?
  isDefault      Boolean  @default(false)
  bankName       String?  // For bank transfers
  accountNumber  String?  // For bank transfers
  routingNumber  String?  // For bank transfers (US)
  createdAt      DateTime @default(now())
}

model PrivacySettings {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  publicProfile   Boolean  @default(true)
  activityStatus  Boolean  @default(true)
  dataCollection  Boolean  @default(false)
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId @unique 
user   User   @relation(fields: [userId], references: [id])
  phone      String
  address    String
  status     VerificationStatus @default(pending)
  comments   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum PaymentType {
  CreditCard
  BankTransfer
  Financing
}

enum PaymentStatus {
  pending
  processing
  succeeded
  failed
  refunded
}

enum SaleStatus {
  pending
  completed
  cancelled
  delivered
}

enum UserRole {
  buyer
  seller
  admin
}

enum VerificationStatus {
  pending
  approved
  rejected
}

enum Transmission {
  Automatic
  Manual
  SemiAutomatic
}

enum FuelType {
  Gasoline
  Diesel
  Electric
  Hybrid
}